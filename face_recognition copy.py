import os
import cv2
import pickle
import numpy as np
from insightface.app import FaceAnalysis
from scipy.spatial.distance import cosine
import tim

# Kh·ªüi t·∫°o ·ª©ng d·ª•ng ArcFace
app = FaceAnalysis(name='buffalo_l')  # Model Face Recognition t·ª´ InsightFace
app.prepare(ctx_id=0, det_size=(640, 640))  # D√πng GPU n·∫øu c√≥

# ƒê∆∞·ªùng d·∫´n l∆∞u d·ªØ li·ªáu
DATASET_PATH = 'dataset1/'
FACES_FILE = os.path.join(DATASET_PATH, 'faces.pkl')
NAMES_FILE = os.path.join(DATASET_PATH, 'names.pkl')

# T·∫°o dataset n·∫øu ch∆∞a c√≥
os.makedirs(DATASET_PATH, exist_ok=True)

# L·∫•y t√™n ng∆∞·ªùi d√πng
name = input('Enter your name --> ')

# M·ªü camera
camera = cv2.VideoCapture(0)
face_data = []
collected = 0

while collected < 10:
    ret, frame = camera.read()
    if not ret:
        print('L·ªói: Kh√¥ng th·ªÉ l·∫•y khung h√¨nh!')
        break
    
    faces = app.get(frame)
    for face in faces:
        embedding = face.embedding
        if collected < 10:
            face_data.append(embedding)
            collected += 1
        cv2.rectangle(frame, (int(face.bbox[0]), int(face.bbox[1])), 
                      (int(face.bbox[2]), int(face.bbox[3])), (255, 0, 0), 2)
    
    cv2.imshow('Capturing Faces', frame)
    if cv2.waitKey(1) == 27:
        break

camera.release()
cv2.destroyAllWindows()

face_data = np.array(face_data)

# L∆∞u embeddings v√†o file
if os.path.exists(FACES_FILE):
    with open(FACES_FILE, 'rb') as f:
        faces_db = pickle.load(f)
    faces_db = np.vstack([faces_db, face_data])
else:
    faces_db = face_data

with open(FACES_FILE, 'wb') as f:
    pickle.dump(faces_db, f)

# L∆∞u t√™n v√†o file
if os.path.exists(NAMES_FILE):
    with open(NAMES_FILE, 'rb') as f:
        names_db = pickle.load(f)
    names_db.extend([name] * 10)
else:
    names_db = [name] * 10

with open(NAMES_FILE, 'wb') as f:
    pickle.dump(names_db, f)

print("D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c l∆∞u th√†nh c√¥ng!")


# L·∫•y t√™n ng∆∞·ªùi d√πng
name = input('Enter your name --> ')

# M·ªü camera
camera = cv2.VideoCapture(0)
face_data = []
collected = 0

while collected < 10:
    ret, frame = camera.read()
    if not ret:
        print('L·ªói: Kh√¥ng th·ªÉ l·∫•y khung h√¨nh!')
        break
    
    faces = app.get(frame)
    for face in faces:
        embedding = face.embedding
        if collected < 10:
            face_data.append(embedding)
            collected += 1
        cv2.rectangle(frame, (int(face.bbox[0]), int(face.bbox[1])), 
                      (int(face.bbox[2]), int(face.bbox[3])), (255, 0, 0), 2)
    
    cv2.imshow('Capturing Faces', frame)
    if cv2.waitKey(1) == 27:
        break

camera.release()
cv2.destroyAllWindows()

face_data = np.array(face_data)

# L∆∞u embeddings v√†o file
if os.path.exists(FACES_FILE):
    with open(FACES_FILE, 'rb') as f:
        faces_db = pickle.load(f)
    faces_db = np.vstack([faces_db, face_data])
else:
    faces_db = face_data

with open(FACES_FILE, 'wb') as f:
    pickle.dump(faces_db, f)

# L∆∞u t√™n v√†o file
if os.path.exists(NAMES_FILE):
    with open(NAMES_FILE, 'rb') as f:
        names_db = pickle.load(f)
    names_db.extend([name] * 10)
else:
    names_db = [name] * 10

with open(NAMES_FILE, 'wb') as f:
    pickle.dump(names_db, f)

print("D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c l∆∞u th√†nh c√¥ng!")

faces_file = 'dataset1/faces.pkl'
names_file = 'dataset1/names.pkl'

# ƒê·ªçc n·ªôi dung names.pkl
if not os.path.exists(names_file):
    print("Kh√¥ng t√¨m th·∫•y t·ªáp names.pkl!")
else:
    with open(names_file, 'rb') as file:
        names = pickle.load(file)
    print("\nüîπ N·ªôi dung c·ªßa names.pkl:")
    print(names)

# ƒê·ªçc n·ªôi dung faces.pkl
if not os.path.exists(faces_file):
    print("Kh√¥ng t√¨m th·∫•y t·ªáp faces.pkl!")
else:
    with open(faces_file, 'rb') as file:
        faces = pickle.load(file)
    
    print("\nüîπ N·ªôi dung c·ªßa faces.pkl:")
    print(faces.shape)  # In to√†n b·ªô n·ªôi dung (c√≥ th·ªÉ r·∫•t l·ªõn!)


# =============== Nh·∫≠n di·ªán khu√¥n m·∫∑t ===============
print("ƒêang kh·ªüi ƒë·ªông h·ªá th·ªëng nh·∫≠n di·ªán...")
with open(FACES_FILE, 'rb') as f:
    faces_db = pickle.load(f)
with open(NAMES_FILE, 'rb') as f:
    names_db = pickle.load(f)

camera = cv2.VideoCapture(0)
while True:
    ret, frame = camera.read()
    if not ret:
        print("L·ªói: Kh√¥ng th·ªÉ l·∫•y khung h√¨nh!")
        break
    
    faces = app.get(frame)
    for face in faces:
        embedding = face.embedding
        min_dist = float('inf')
        best_match = "Unknown"
        
        for idx, stored_embedding in enumerate(faces_db):
            dist = cosine(embedding, stored_embedding)
            if dist < min_dist:
                min_dist = dist
                best_match = names_db[idx]
        
        if min_dist > 0.5:
            best_match = "Unknown"
        
        x1, y1, x2, y2 = map(int, face.bbox)
        cv2.rectangle(frame, (x1, y1), (x2, y2), (0, 255, 0), 2)
        cv2.putText(frame, best_match, (x1, y1 - 10), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 0), 2)
    
    cv2.imshow('Live Face Recognition', frame)
    if cv2.waitKey(1) == 27:
        break

camera.release()
cv2.destroyAllWindows()

# ƒê·ªçc d·ªØ li·ªáu embeddings v√† t√™n
FACES_FILE = "dataset1/faces.pkl"
NAMES_FILE = "dataset1/names.pkl"

print("ƒêang kh·ªüi ƒë·ªông h·ªá th·ªëng nh·∫≠n di·ªán...")
with open(FACES_FILE, 'rb') as f:
    faces_db = pickle.load(f)
with open(NAMES_FILE, 'rb') as f:
    names_db = pickle.load(f)

camera = cv2.VideoCapture(0)

last_frame = None  # Bi·∫øn l∆∞u ·∫£nh cu·ªëi c√πng ƒë√£ x·ª≠ l√Ω

while True:
    ret, frame = camera.read()
    if not ret:
        print("L·ªói: Kh√¥ng th·ªÉ l·∫•y khung h√¨nh!")
        break

    faces = app.get(frame)

    for face in faces:
        embedding = face.embedding
        min_dist = float('inf')
        best_match = "Unknown"
        
        for idx, stored_embedding in enumerate(faces_db):
            dist = cosine(embedding, stored_embedding)
            if dist < min_dist:
                min_dist = dist
                best_match = names_db[idx]
        
        if min_dist > 0.5:
            best_match = "Unknown"
        
        x1, y1, x2, y2 = map(int, face.bbox)
        cv2.rectangle(frame, (x1, y1), (x2, y2), (0, 255, 0), 2)
        cv2.putText(frame, best_match, (x1, y1 - 10), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 0), 2)

    cv2.imshow('Live Face Recognition', frame)

    last_frame = frame.copy()  # L∆∞u ·∫£nh cu·ªëi c√πng ƒë√£ x·ª≠ l√Ω (c√≥ bounding box + t√™n)

    if cv2.waitKey(1) == 27:  # Nh·∫•n ESC ƒë·ªÉ tho√°t
        break

# L∆∞u ·∫£nh cu·ªëi c√πng (c√≥ bounding box v√† t√™n)
if last_frame is not None:
    cv2.imwrite("last_frame.jpg", last_frame)
    print("·∫¢nh cu·ªëi c√πng ƒë√£ ƒë∆∞·ª£c l∆∞u: last_frame.jpg")

camera.release()
cv2.destroyAllWindows()

print("ƒêang kh·ªüi ƒë·ªông h·ªá th·ªëng nh·∫≠n di·ªán...")
with open(FACES_FILE, 'rb') as f:
    faces_db = pickle.load(f)
with open(NAMES_FILE, 'rb') as f:
    names_db = pickle.load(f)

camera = cv2.VideoCapture(0)

SCAN_INTERVAL = 10  # Kho·∫£ng th·ªùi gian gi·ªØa c√°c l·∫ßn qu√©t (gi√¢y)
DISPLAY_DURATION = 2  # Th·ªùi gian hi·ªÉn th·ªã bounding box v√† t√™n (gi√¢y)

last_scan_time = 0  # Th·ªùi gian qu√©t cu·ªëi c√πng
last_display_time = 0  # Th·ªùi gian b·∫Øt ƒë·∫ßu hi·ªÉn th·ªã
last_faces_detected = []  # L∆∞u k·∫øt qu·∫£ nh·∫≠n di·ªán g·∫ßn nh·∫•t

while True:
    ret, frame = camera.read()
    if not ret:
        print("L·ªói: Kh√¥ng th·ªÉ l·∫•y khung h√¨nh!")
        break

    current_time = time.time()
    
    # N·∫øu ƒë√£ ƒë·∫øn th·ªùi gian qu√©t ti·∫øp theo
    if current_time - last_scan_time >= SCAN_INTERVAL:
        last_scan_time = current_time  # C·∫≠p nh·∫≠t th·ªùi gian qu√©t
        last_display_time = current_time  # C·∫≠p nh·∫≠t th·ªùi gian b·∫Øt ƒë·∫ßu hi·ªÉn th·ªã

        faces = app.get(frame)  # L·∫•y danh s√°ch khu√¥n m·∫∑t
        last_faces_detected = []  # Reset danh s√°ch khu√¥n m·∫∑t ƒë√£ qu√©t

        for face in faces:
            embedding = face.embedding
            min_dist = float('inf')
            best_match = "Unknown"

            for idx, stored_embedding in enumerate(faces_db):
                dist = cosine(embedding, stored_embedding)
                if dist < min_dist:
                    min_dist = dist
                    best_match = names_db[idx]

            if min_dist > 0.5:
                best_match = "Unknown"

            # L∆∞u bounding box v√† t√™n ƒë·ªÉ hi·ªÉn th·ªã
            x1, y1, x2, y2 = map(int, face.bbox)
            last_faces_detected.append((x1, y1, x2, y2, best_match))

    # Hi·ªÉn th·ªã bounding box trong 2 gi√¢y
    if current_time - last_display_time <= DISPLAY_DURATION:
        for (x1, y1, x2, y2, name) in last_faces_detected:
            cv2.rectangle(frame, (x1, y1), (x2, y2), (0, 255, 0), 2)
            cv2.putText(frame, name, (x1, y1 - 10), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 0), 2)

    cv2.imshow('Live Face Recognition', frame)

    if cv2.waitKey(1) == 27:
        break

camera.release()
cv2.destroyAllWindows()